{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["episodesPerSeason","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createEpisodeList","episodes","i","state","season","push","createEpisodeButton","setCurrentSeason","setState","Scroll","scroller","scrollTo","duration","smooth","setCurrentEpisode","episode","createSeasonsList","seasons","length","createSeasonButton","seasonNumber","react_default","a","createElement","className","key","onClick","episodeNumber","getRemainingEpsisodeCount","remainingEpisodes","getTimeleft","episodeCount","releaseDate","moment","yesterday","subtract","remainingDays","diff","zeitReicht","aufzuholen","Helmet","rel","sizes","href","type","color","name","content","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.911bce32.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Scroll from 'react-scroll';\nimport moment from 'moment';\nimport { Helmet } from 'react-helmet';\n\nconst episodesPerSeason = [10, 10, 10, 10, 10, 10, 7];\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      season: 0,\n      episode: 0\n    };\n  }\n\n  createEpisodeList = () => {\n    var episodes = [];\n\n    for (var i = 0; i < episodesPerSeason[this.state.season]; i++) {\n      episodes.push(\n        this.createEpisodeButton(i)\n      );\n    }\n\n    return episodes;\n  }\n\n  setCurrentSeason = season => {\n    this.setState((state, props) => ({\n      season: season\n    }));\n\n    Scroll.scroller.scrollTo('episodes', {\n      duration: 1000,\n      smooth: 'easeInOutCubic'\n    });\n  }\n\n  setCurrentEpisode = episode => {\n    this.setState((state, props) => ({\n      episode: episode\n    }));\n\n    Scroll.scroller.scrollTo('timeleft', {\n      duration: 1000,\n      smooth: 'easeInOutCubic'\n    });\n  }\n\n  createSeasonsList = () => {\n    var seasons = [];\n\n    for (var i = 1; i <= episodesPerSeason.length; i++) {\n      seasons.push(\n        this.createSeasonButton(i)\n      );\n    }\n\n    return seasons;\n  }\n\n  createEpisodeList = () => {\n    var episodes = [];\n\n    for (var i = 1; i <= episodesPerSeason[this.state.season - 1]; i++) {\n      episodes.push(\n        this.createEpisodeButton(i)\n      );\n    }\n\n    return episodes;\n  }\n\n  createSeasonButton = (seasonNumber) => {\n    return <button\n              className={this.state.season === seasonNumber ? 'active' : ''}\n              key={'season-' + seasonNumber}\n              onClick={() => this.setCurrentSeason(seasonNumber)}>\n      {'Staffel ' + seasonNumber}\n    </button>\n  }\n\n  createEpisodeButton = (episodeNumber) => {\n    return <button\n              className={this.state.episode === episodeNumber ? 'active' : ''}\n              key={'episode-' + episodeNumber}\n              onClick={() => this.setCurrentEpisode(episodeNumber)}>\n      {'Folge ' + episodeNumber}\n    </button>\n  }\n\n  getRemainingEpsisodeCount = () => {\n    var remainingEpisodes = 0;\n\n    for (var i = this.state.season - 1; i < episodesPerSeason.length; i++) {\n      remainingEpisodes += episodesPerSeason[i];\n    }\n\n    return remainingEpisodes - this.state.episode;\n  }\n\n  getTimeleft = () => {\n    var episodeCount = this.getRemainingEpsisodeCount();\n    var releaseDate = moment('15.04.2019', 'DD.MM.YYYY');\n    var yesterday = moment().subtract(1, 'days');\n    var remainingDays = releaseDate.diff(yesterday, 'days')\n\n    var zeitReicht = remainingDays / episodeCount;\n    var aufzuholen = episodeCount % remainingDays;\n\n    if (zeitReicht < 1) {\n      return <p>Du musst pro Tag eine Folge schauen, musst aber {aufzuholen} Folgen aufholen</p>\n    }\n    if (zeitReicht > 1) {\n      return <p>Wenn du pro Tag eine Folge schaust wirst du vor dem Staffelfinale fertig.</p>\n    }\n    if (zeitReicht === 1) {\n      return <p>Wenn du pro Tag eine Folge schaust wirst du genau zum Staffelfinale fertig.</p>\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Helmet>\n          <title>GoT Calculator</title>\n          <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"/>\n          <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\"/>\n          <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\"/>\n          <link rel=\"manifest\" href=\"/site.webmanifest\"/>\n          <link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color=\"#000000\"/>\n          <meta name=\"msapplication-TileColor\" content=\"#000000\"/>\n          <meta name=\"theme-color\" content=\"#000000\"/>\n        </Helmet>\n        <div className=\"section section-one\">\n          <h2>Aktuelle Staffel</h2>\n          <div>\n            {this.createSeasonsList()}\n          </div>\n        </div>\n        <div className=\"section section-episodes\" id=\"episodes\">\n          <h2>Zuletzt gesehene Folge</h2>\n          <div>\n            {this.state.season !== 0 &&\n              this.createEpisodeList()\n            }\n            {this.state.season === 0 &&\n              <p>Bitte w채hle zun채chst eine Staffel aus.</p>\n            }\n          </div>\n        </div>\n        <div className=\"section section-timeleft\" id=\"timeleft\">\n          <h2>Anzahl verbleibende Folgen</h2>\n          {this.state.season !== 0 && this.state.episode !== 0 &&\n            this.getTimeleft()\n          }\n          {(this.state.season === 0 || this.state.episode === 0) &&\n            <p>Bitte w채hle zun채chst eine Staffel und Folge aus.</p>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}